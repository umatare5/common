name: Reusable Go Coverage Test Workflow

# Required permissions for calling workflow:
# permissions:
#   contents: read        # For checking out code
#   pull-requests: write  # For writing PR comments (if needed)

on:
  workflow_call:
    inputs:
      go_version:
        description: "Go version to use"
        required: false
        type: string
        default: "1.24.5"
      coverage_threshold:
        description: "Minimum coverage percentage required"
        required: false
        type: number
        default: 80
      coverage_file:
        description: "Coverage output file path"
        required: false
        type: string
        default: "./coverage.out"
      runs_on:
        description: "Runner to use for the job"
        required: false
        type: string
        default: "ubuntu-24.04"
      fetch_depth:
        description: "Number of commits to fetch (0 = all history)"
        required: false
        type: number
        default: 1
      test_packages:
        description: "Test packages pattern"
        required: false
        type: string
        default: "./..."
      gotestsum_format:
        description: "gotestsum output format"
        required: false
        type: string
        default: "testname"
      enable_race_detection:
        description: "Enable race detection in tests"
        required: false
        type: boolean
        default: true

jobs:
  coverage:
    name: Coverage Test
    runs-on: ${{ inputs.runs_on }}

    steps:
      # Checkout the code repository to access source files for coverage analysis
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: ${{ inputs.fetch_depth }}

      # Set up Go development environment with dependency caching for faster builds
      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ inputs.go_version }}
          cache: true

      # Clean and verify Go module dependencies to ensure consistent test environment
      - name: Verify dependencies
        run: |
          go mod tidy
          go mod verify

      # Install gotestsum for enhanced test output and coverage reporting
      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      # Execute tests with coverage profiling and optional race detection
      - name: Run tests with coverage
        run: |
          if [ "${{ inputs.enable_race_detection }}" = "true" ]; then
            gotestsum --format ${{ inputs.gotestsum_format }} -- -race -coverprofile=${{ inputs.coverage_file }} ${{ inputs.test_packages }}
          else
            gotestsum --format ${{ inputs.gotestsum_format }} -- -coverprofile=${{ inputs.coverage_file }} ${{ inputs.test_packages }}
          fi

      # Parse coverage report and extract overall coverage percentage for validation
      - name: Extract coverage percentage
        id: coverage
        run: |
          coverage=$(go tool cover -func=${{ inputs.coverage_file }} | tail -1 | awk '{print $3}' | sed 's/%//')
          echo "percentage=${coverage}" >> $GITHUB_OUTPUT
          echo "Coverage: ${coverage}%"

      # Fail the workflow if coverage falls below the specified threshold
      - name: Check coverage threshold
        if: steps.coverage.outputs.percentage < inputs.coverage_threshold
        run: |
          echo "❌ Coverage ${{ steps.coverage.outputs.percentage }}% < ${{ inputs.coverage_threshold }}%"
          go tool cover -func=${{ inputs.coverage_file }} | grep -v "100.0%"
          exit 1

      # Display success message when coverage meets or exceeds the threshold
      - name: Coverage success
        if: steps.coverage.outputs.percentage >= inputs.coverage_threshold
        run: echo "✅ Coverage ${{ steps.coverage.outputs.percentage }}% >= ${{ inputs.coverage_threshold }}%"
