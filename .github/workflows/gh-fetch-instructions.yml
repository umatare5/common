name: Reusable Copilot Instructions Sync Workflow

# Required permissions for calling workflow:
# permissions:
#   contents: write        # For creating commits and branches
#   pull-requests: write   # For creating pull requests

on:
  workflow_call:
    inputs:
      source_repo:
        description: "Source repository for downloading instructions files (format: owner/repo)"
        required: false
        type: string
        default: "github/awesome-copilot"
      source_branch_name:
        description: "Source branch name for downloading instructions files"
        required: false
        type: string
        default: "main"
      instructions_files:
        description: "List of instructions files to download (newline-separated)"
        required: false
        type: string
        default: |
          go.instructions.md
          markdown.instructions.md
          github-actions-ci-cd-best-practices.instructions.md
      prompts_files:
        description: "List of prompt files to download (newline-separated)"
        required: false
        type: string
        default: |
          ai-prompt-engineering-safety-review.prompt.md
      runs_on:
        description: "Runner to use for the job"
        required: false
        type: string
        default: "ubuntu-24.04"
      pr_branch_name:
        description: "Branch name for the pull request"
        required: false
        type: string
        default: "chore/copilot-instructions-sync"
      pr_title:
        description: "Pull request title"
        required: false
        type: string
        default: "[Auto-generated] Sync public Copilot instructions"

defaults:
  run:
    shell: bash -euo pipefail {0}

jobs:
  sync:
    name: Sync Copilot Instructions
    runs-on: ${{ inputs.runs_on }}
    steps:
      # Checkout the code repository to access and modify instruction files
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Create necessary directories for storing instructions and prompts
      - name: Prepare directories
        run: |
          mkdir -p .github/instructions .github/prompts

      # Generate current date for PR title and commit message
      - name: Generate date
        id: date
        run: echo "current=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      # Generate PR body with source repository and file lists
      - name: Generate PR body
        id: pr_body
        run: |
          cat << 'EOF' >> "$GITHUB_OUTPUT"
          content<<BODY_EOF
          This PR sync of public Copilot instructions.

          ### Source

          https://github.com/${{ inputs.source_repo }}

          ### New Instructions

          EOF
          while IFS= read -r f; do
            [[ -z "${f}" ]] && continue
            echo "- ${f}" >> "$GITHUB_OUTPUT"
          done <<< "${{ inputs.instructions_files }}"

          cat << 'EOF' >> "$GITHUB_OUTPUT"

          ### New Prompts

          EOF
          while IFS= read -r f; do
            [[ -z "${f}" ]] && continue
            echo "- ${f}" >> "$GITHUB_OUTPUT"
          done <<< "${{ inputs.prompts_files }}"

          echo "BODY_EOF" >> "$GITHUB_OUTPUT"

      # Download instructions files from the specified source repository
      - name: Download instructions files
        run: |
          base_url="https://raw.githubusercontent.com/${{ inputs.source_repo }}/${{ inputs.source_branch_name }}"
          while IFS= read -r f; do
            [[ -z "${f}" ]] && continue
            echo "- ${f} -> .github/instructions/${f}"
            curl -fsSL "${base_url}/instructions/${f}" -o ".github/instructions/${f}"
          done <<< "${{ inputs.instructions_files }}"

      # Download prompt files from the specified source repository
      - name: Download prompt files
        run: |
          base_url="https://raw.githubusercontent.com/${{ inputs.source_repo }}/${{ inputs.source_branch_name }}"
          while IFS= read -r f; do
            [[ -z "${f}" ]] && continue
            echo "- ${f} -> .github/prompts/${f}"
            curl -fsSL "${base_url}/prompts/${f}" -o ".github/prompts/${f}"
          done <<< "${{ inputs.prompts_files }}"

      # Stage all downloaded and modified instruction and prompt files
      - name: Stage changes
        run: |
          git add -A .github/instructions .github/prompts

      # Detect if there are any changes to commit and create pull request
      - name: Detect changes
        id: changes
        run: |
          if git diff --cached --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      # Create pull request if there are changes to the instruction files
      - name: Create pull request
        if: steps.changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c # v6.1.0
        with:
          base: ${{ github.ref_name }}
          branch: "${{ inputs.pr_branch_name }}-${{ steps.date.outputs.current }}"
          title: "${{ inputs.pr_title }}: ${{ steps.date.outputs.current }}"
          commit-message: "${{ inputs.pr_title }}: ${{ steps.date.outputs.current }}"
          body: ${{ steps.pr_body.outputs.content }}
          add-paths: |
            .github/instructions/**
            .github/prompts/**
